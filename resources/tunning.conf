projectionists {
    defaultParallelism = 3
    defaultParallelism = ${?PROJECTIONIST_PARALELLISM}

}

# Default persistence extension settings.
akka.persistence {

    # When starting many persistent actors at the same time the journal
    # and its data store is protected from being overloaded by limiting number
    # of recoveries that can be in progress at the same time. When
    # exceeding the limit the actors will wait until other recoveries have
    # been completed.
    #max-concurrent-recoveries = 50
    max-concurrent-recoveries = 1000

}

akka.persistence.journal {

    # Maximum number of messages that will be batched when using `persistAsync`.
    # Also used as the max batch size for deletes.
    max-message-batch-size = 100
}

## DRIVER CONNECTION
datastax-java-driver.advanced.connection {
    # MAX allowed value is 32k
    #max-requests-per-connection = 1024
    max-requests-per-connection = 3000
    # pool.local.size = 1
    pool.local.size = 2 # not recommended to increase
    # pool.remote.size = 1
    pool.remote.size = 2 # not recommended to increase
}

akka.persistence.cassandra.default-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 6
      parallelism-factor = 1
      parallelism-max = 6
    }
}


# The dispatcher that will be used by default by consumer and
# producer stages.
akka.kafka.default-dispatcher {
   type = "Dispatcher"
   executor = "thread-pool-executor"

   thread-pool-executor {
     fixed-pool-size = 16
   }
}

# This is used to create the Akka actors dispatchers, who use fork join
hardwareSpecs {

    # Min number of threads to cap factor-based parallelism number to
    parallelismMin = 4
    parallelismMin = ${?parallelismMin}
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelismFactor = 1
    # Max number of threads to cap factor-based parallelism number to
    parallelismMax = 12
    parallelismMax = ${?parallelismMax}


    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.

    #
    # There are a few edge cases.
    # If you have a case where the number of threads is equal to the number of actors
    # using the dispatcher, set the number extremely high, like 1000.

    # If your actors perform tasks that will take some time to complete
    # and you need fairness to avoid starvation of other actors sharing the pool,
    # set the throughput to 1.
    #
     processedMessagesPerActorPerThreadJump = 1 # https://letitcrash.com/post/40755146949/tuning-dispatchers-in-akka-applications

}
